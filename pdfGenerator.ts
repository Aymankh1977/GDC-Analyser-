import jsPDF from 'jspdf';

export const generatePDF = (guidelines: any): void => {
  // Create PDF with better font support
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let yPosition = 20;

  // Set default font to helvetica (better compatibility)
  doc.setFont('helvetica');
  doc.setFontSize(10);

  // Add header with simple styling to avoid encoding issues
  doc.setFillColor(30, 64, 175);
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('GDC COMPLIANCE REPORT', pageWidth / 2, 15, { align: 'center' });
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Program: ${guidelines.programName}`, pageWidth / 2, 25, { align: 'center' });
  doc.text(`Generated: ${new Date().toLocaleDateString()}`, pageWidth / 2, 32, { align: 'center' });

  yPosition = 50;

  // Helper function to clean text and add section
  const addSection = (title: string, content: string) => {
    // Clean the title from any special characters
    const cleanTitle = title.replace(/[^\x20-\x7E]/g, '').trim();
    
    doc.setTextColor(30, 64, 175);
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(cleanTitle, 20, yPosition);
    yPosition += 10;

    doc.setTextColor(0, 0, 0);
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    // Clean content from special characters
    const cleanContent = content.replace(/[^\x20-\x7E\n\r]/g, '').trim();
    
    const lines = doc.splitTextToSize(cleanContent, pageWidth - 40);
    
    // Check if we need a new page
    if (yPosition + (lines.length * 5) > pageHeight - 20) {
      doc.addPage();
      yPosition = 20;
    }
    
    doc.text(lines, 20, yPosition);
    yPosition += (lines.length * 5) + 15;
  };

  // Clean all content before adding to PDF
  const cleanExecutiveSummary = guidelines.executiveSummary.replace(/[^\x20-\x7E\n\r]/g, '').trim();
  const cleanStrengths = guidelines.strengths.replace(/[^\x20-\x7E\n\r]/g, '').trim();
  const cleanAreasForImprovement = guidelines.areasForImprovement.replace(/[^\x20-\x7E\n\r]/g, '').trim();
  const cleanRecommendations = guidelines.recommendations.replace(/[^\x20-\x7E\n\r]/g, '').trim();

  // Add all sections with cleaned content
  addSection('EXECUTIVE SUMMARY', cleanExecutiveSummary);
  addSection('PROGRAM STRENGTHS', cleanStrengths);
  addSection('AREAS FOR IMPROVEMENT', cleanAreasForImprovement);
  addSection('RECOMMENDATIONS', cleanRecommendations);

  // Add footer
  const totalPages = doc.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    doc.text('Generated by DentEdTech GDC Analyser Pro', pageWidth / 2, pageHeight - 5, { align: 'center' });
  }

  // Save the PDF
  doc.save(`GDC_Compliance_Report_${guidelines.programName.replace(/[^a-z0-9]/gi, '_')}.pdf`);
};
